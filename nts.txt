D'accord, voici comment vous pouvez appliquer les droits d'accès, configurer la réplication et la sauvegarde dans MongoDB en utilisant des commandes directement dans le shell MongoDB :

### Création des rôles et des utilisateurs :

```bash
# Création du rôle pour les étudiants
db.createRole({
  role: "student_role",
  privileges: [
    { resource: { db: "university", collection: "students" }, actions: ["find", "insert", "update", "remove"] }
  ],
  roles: []
})

# Création du rôle pour les enseignants
db.createRole({
  role: "teacher_role",
  privileges: [
    { resource: { db: "university", collection: "teachers" }, actions: ["find", "insert", "update", "remove"] }
  ],
  roles: []
})

# Création du rôle pour le personnel administratif
db.createRole({
  role: "admin_staff_role",
  privileges: [
    { resource: { db: "university", collection: "admin_staff" }, actions: ["find", "insert", "update", "remove"] }
  ],
  roles: []
})

# Création du rôle pour les sports
db.createRole({
  role: "sports_role",
  privileges: [
    { resource: { db: "university", collection: "sports" }, actions: ["find", "insert", "update", "remove"] }
  ],
  roles: []
})

# Création de l'utilisateur pour les étudiants
db.createUser({
  user: "student_user",
  pwd: "password",
  roles: ["student_role"]
})

# Création de l'utilisateur pour les enseignants
db.createUser({
  user: "teacher_user",
  pwd: "password",
  roles: ["teacher_role"]
})

# Création de l'utilisateur pour le personnel administratif
db.createUser({
  user: "admin_staff_user",
  pwd: "password",
  roles: ["admin_staff_role"]
})

# Création de l'utilisateur pour les sports
db.createUser({
  user: "sports_user",
  pwd: "password",
  roles: ["sports_role"]
})
```

### Configuration de la réplication :

```bash
# Configuration du Replica Set
rs.initiate()
```

### Configuration de la sauvegarde :

```bash
# Sauvegarde de la base de données avec mongodump
mongodump --db university --out /path/to/backup/directory

# Restauration de la sauvegarde avec mongorestore
mongorestore --db university /path/to/backup/directory/university
```

Assurez-vous de remplacer `/path/to/backup/directory` par le chemin d'accès à votre répertoire de sauvegarde. Ces commandes peuvent être exécutées directement dans le shell MongoDB ou dans un script de shell pour une automatisation supplémentaire.


===================================================================================================================
D'accord, voici comment vous pouvez exécuter chaque commande en détail dans le shell MongoDB dans Docker :

1. **Créer des rôles et des utilisateurs** :

   - Pour créer un rôle, utilisez la méthode `db.createRole()` dans le shell MongoDB. Par exemple, pour créer un rôle d'administrateur, vous pouvez exécuter la commande suivante :

     ```javascript
     db.createRole({
         role: "universityAdmin",
         privileges: [
             { resource: { db: "university", collection: "" }, actions: [ "find", "insert", "update", "remove" ] }
         ],
         roles: []
     })
     ```

     Cette commande crée un rôle nommé "universityAdmin" avec des privilèges pour effectuer des opérations de lecture, d'insertion, de mise à jour et de suppression sur toutes les collections de la base de données "university".

   - Pour créer un utilisateur et lui attribuer un rôle, utilisez la méthode `db.createUser()`. Par exemple, pour créer un utilisateur avec le rôle "universityAdmin", vous pouvez exécuter la commande suivante :

     ```javascript
     db.createUser({
         user: "adminUser",
         pwd: "adminPassword",
         roles: [ { role: "universityAdmin", db: "university" } ]
     })
     ```

     Cette commande crée un utilisateur nommé "adminUser" avec le mot de passe "adminPassword" et lui attribue le rôle "universityAdmin" dans la base de données "university".

2. **Configurer la réplication** :

   - Pour configurer la réplication, vous devez d'abord initialiser le Replica Set. Assurez-vous d'être connecté au shell MongoDB sur le primaire du Replica Set. Exécutez la commande suivante :

     ```bash
     rs.initiate()
     ```

     Cette commande initialise le Replica Set avec le nœud actuel comme primaire.

3. **Configurer la sauvegarde** :

   - Pour effectuer une sauvegarde de la base de données, utilisez la commande `mongodump`. Assurez-vous d'avoir accès au système de fichiers de votre conteneur Docker pour stocker les sauvegardes. Par exemple, pour sauvegarder la base de données "university", vous pouvez exécuter la commande suivante :

     ```bash
     mongodump --db university --out /path/to/backup/directory
     ```

     Cette commande sauvegarde la base de données "university" dans le répertoire spécifié.

   - Pour restaurer une sauvegarde, utilisez la commande `mongorestore`. Par exemple, pour restaurer une sauvegarde précédemment créée dans la base de données "university", vous pouvez exécuter la commande suivante :

     ```bash
     mongorestore --db university /path/to/backup/directory/university
     ```

     Cette commande restaure la sauvegarde dans la base de données "university".

Assurez-vous de remplacer les valeurs telles que les noms d'utilisateur, les mots de passe, les noms de bases de données, les chemins de répertoire, etc., par les valeurs appropriées pour votre configuration.